{"version":3,"sources":["manager.js"],"names":["define","langx","isMobile","noder","datax","finder","geom","eventer","styler","dnd","MousedDragDrop","on","off","attr","removeAttr","pagePosition","addClass","height","supportDraggable","document","createElement","apple","device","Manager","Evented","inherit","klassName","init","prepare","draggable","event","e","create","dragSource","dragHandle","originalEvent","trigger","this","useNativeDnd","options","forceFallback","dragging","data","_fallbacker","startPos","selection","empty","window","getSelection","removeAllRanges","err","start","p","draggingOffsetX","parseInt","pageX","left","draggingOffsetY","pageY","top","elm","ghost","transfer","draggingClass","draggingGhost","draggingTransfer","each","key","value","dataTransfer","setData","setDragImage","e1","over","end","dropped","removeClass","e2"],"mappings":"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","file":"../manager.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-langx-hoster/is-mobile\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"./dnd\",\r\n    \"./fallback/moused-drag-drop\"\r\n], function(langx, isMobile,noder, datax, finder, geom, eventer, styler,dnd,MousedDragDrop) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n        // This will not pass for IE9, because IE9 DnD only works on anchors\r\n    var  supportDraggable = ('draggable' in document.createElement('div')) && !isMobile.apple.device; //TODO move to xxx\r\n\r\n\r\n    var Manager = dnd.Manager = langx.Evented.inherit({\r\n        klassName: \"Manager\",\r\n\r\n        init: function() {\r\n\r\n        },\r\n\r\n        prepare: function(draggable,event) {\r\n            var e = eventer.create(\"preparing\", {\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle,\r\n                originalEvent : event\r\n            });\r\n            draggable.trigger(e);\r\n            draggable.dragSource = e.dragSource;\r\n\r\n            this.useNativeDnd =  draggable.options.forceFallback ? false : supportDraggable;  \r\n            this.dragging = draggable;\r\n\r\n            if (draggable.dragSource) {\r\n                datax.data(draggable.dragSource, \"draggable\", true);\r\n                if (this.useNativeDnd) {\r\n                    datax.attr(draggable.dragSource, \"draggable\", 'true');\r\n                } else {\r\n                    this._fallbacker = new MousedDragDrop(this,draggable.dragSource,draggable.startPos);\r\n                }\r\n\r\n                try {\r\n                    if (document.selection) {\r\n                       document.selection.empty();\r\n                    } else {\r\n                        window.getSelection().removeAllRanges();\r\n                    }\r\n                } catch (err) {\r\n                }\r\n            }\r\n        },\r\n\r\n        start: function(draggable, event) {\r\n            datax.data(draggable.dragSource, \"draggable\", false);\r\n            if (this.useNativeDnd) {\r\n                datax.attr(draggable.dragSource, \"draggable\", 'false');\r\n            }\r\n\r\n            var p = geom.pagePosition(draggable.dragSource);\r\n            this.draggingOffsetX = parseInt(event.pageX - p.left);\r\n            this.draggingOffsetY = parseInt(event.pageY - p.top)\r\n\r\n            var e = eventer.create(\"started\", {\r\n                elm: draggable.elm,\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle,\r\n                ghost: null,\r\n\r\n                originalEvent : event,\r\n\r\n                transfer: {}\r\n            });\r\n\r\n            draggable.trigger(e);\r\n\r\n\r\n            this.dragging = draggable;\r\n\r\n            if (draggable.draggingClass) {\r\n                styler.addClass(draggable.dragSource, draggable.draggingClass);\r\n            }\r\n\r\n            this.draggingGhost = e.ghost;\r\n            if (!this.draggingGhost) {\r\n                this.draggingGhost = draggable.dragSource;\r\n            }\r\n\r\n            this.draggingTransfer = e.transfer;\r\n            if (this.draggingTransfer) {\r\n\r\n                langx.each(this.draggingTransfer, function(key, value) {\r\n                    event.dataTransfer.setData(key, value);\r\n                });\r\n            }\r\n\r\n            event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);\r\n\r\n            ///event.dataTransfer.effectAllowed = \"copyMove\";\r\n\r\n            var e1 = eventer.create(\"dndStarted\", {\r\n                elm: e.elm,\r\n                dragSource: e.dragSource,\r\n                dragHandle: e.dragHandle,\r\n                ghost: e.ghost,\r\n                transfer: e.transfer\r\n            });\r\n\r\n            this.trigger(e1);\r\n        },\r\n\r\n        over: function() {\r\n\r\n        },\r\n\r\n        end: function(dropped) {\r\n            var dragging = this.dragging;\r\n            if (dragging) {\r\n                if (dragging.draggingClass) {\r\n                    styler.removeClass(dragging.dragSource, dragging.draggingClass);\r\n                }\r\n            }\r\n\r\n            var e2 = eventer.create(\"ended\", {\r\n                originalEvent : e\r\n            });\r\n\r\n            this.dragging.trigger(e2);\r\n\r\n\r\n            var e = eventer.create(\"dndEnded\", {});\r\n            this.trigger(e);\r\n\r\n\r\n            this.dragging = null;\r\n            this.draggingTransfer = null;\r\n            this.draggingGhost = null;\r\n            this.draggingOffsetX = null;\r\n            this.draggingOffsetY = null;\r\n        }\r\n    });\r\n\r\n    var manager = new Manager();\r\n\r\n\r\n    return manager;\r\n});"]}