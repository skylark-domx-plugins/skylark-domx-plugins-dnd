{"version":3,"sources":["draggable.js"],"names":["define","langx","noder","datax","finder","geom","eventer","styler","touch","plugins","dnd","manager","on","off","attr","removeAttr","pagePosition","addClass","height","Draggable","Plugin","inherit","klassName","pluginName","options","draggingClass","forceFallback","_construct","elm","this","overrided","self","forEach","eventName","isFunction","mousy","mousedown","e","handle","dragHandle","target","_elm","closest","source","dragSource","startPos","x","clientX","y","clientY","prepare","mouseup","dragstart","dragging","start","dragend","stop","end","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,qBACA,oBACA,sBACA,oBACA,uBACA,sBACA,+BACA,4BACA,QACA,aACD,SAASC,EAAOC,EAAOC,EAAOC,EAAQC,EAAMC,EAASC,EAAQC,EAAOC,EAASC,EAAIC,GACvEL,EAAQM,GACPN,EAAQO,IACPV,EAAMW,KACAX,EAAMY,WACVV,EAAKW,aACHT,EAAOU,SACTZ,EAAKa,OANlB,IAUIC,EAAYV,EAAQW,OAAOC,SAC3BC,UAAW,YAEXC,WAAa,qBAEbC,SACIC,cAAgB,WAChBC,eAAgB,GAGpBC,WAAY,SAASC,EAAKJ,GACtBK,KAAKC,UAAUF,EAAIJ,GAEnB,IAAIO,EAAOF,KACPL,EAAUK,KAAKL,QAEnBO,EAAKN,cAAgBD,EAAQC,eAE5B,YAAa,UAAW,QAAS,UAAUO,QAAQ,SAASC,GACrDhC,EAAMiC,WAAWV,EAAQS,KACzBF,EAAKnB,GAAGqB,EAAWT,EAAQS,MAInCzB,EAAM2B,MAAMP,GAEZtB,EAAQM,GAAGgB,GACPQ,UAAa,SAASC,GAClB,IAAIb,EAAUO,EAAKP,QACfA,EAAQc,SACJrC,EAAMiC,WAAWV,EAAQc,QACzBP,EAAKQ,WAAaf,EAAQc,OAAOD,EAAEG,OAAOT,EAAKU,MAE/CV,EAAKQ,WAAanC,EAAOsC,QAAQL,EAAEG,OAAQhB,EAAQc,OAAOP,EAAKU,OAE9DV,EAAKQ,cAIVf,EAAQmB,OACJ1C,EAAMiC,WAAWV,EAAQmB,QACzBZ,EAAKa,WAAcpB,EAAQmB,OAAON,EAAEG,OAAQT,EAAKU,MAEjDV,EAAKa,WAAaxC,EAAOsC,QAAQL,EAAEG,OAAQhB,EAAQmB,OAAOZ,EAAKU,MAGnEV,EAAKa,WAAab,EAAKU,KAG3BV,EAAKc,UACDC,EAAIT,EAAEU,QACNC,EAAIX,EAAEY,SAGVtC,EAAQuC,QAAQnB,EAAKM,KAIzBc,QAAW,SAASd,KAQpBe,UAAa,SAASf,GACd1B,EAAQ0C,WAAatB,GAGzBpB,EAAQ2C,MAAMvB,EAAMM,IAGxBkB,QAAW,SAASlB,GACZ1B,EAAQ0C,WAAatB,IAGzBzB,EAAQkD,KAAKnB,GAER1B,EAAQ0C,UAIb1C,EAAQ8C,KAAI,UAU5B,OAFAhD,EAAQiD,SAASvC,EAAU,aAEpBT,EAAIS,UAAYA","file":"../draggable.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-devices-points/touch\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, touch, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n\r\n    var Draggable = plugins.Plugin.inherit({\r\n        klassName: \"Draggable\",\r\n        \r\n        pluginName : \"lark.dnd.draggable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\",\r\n            forceFallback : false\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            self.draggingClass = options.draggingClass;\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n            touch.mousy(elm);\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var options = self.options;\r\n                    if (options.handle) {\r\n                        if (langx.isFunction(options.handle)) {\r\n                            self.dragHandle = options.handle(e.target,self._elm);\r\n                        } else {\r\n                            self.dragHandle = finder.closest(e.target, options.handle,self._elm);\r\n                        }\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (options.source) {\r\n                        if (langx.isFunction(options.source)) {\r\n                            self.dragSource =  options.source(e.target, self._elm);                            \r\n                        } else {\r\n                            self.dragSource = finder.closest(e.target, options.source,self._elm);                            \r\n                        }\r\n                    } else {\r\n                        self.dragSource = self._elm;\r\n                    }\r\n\r\n                    self.startPos = {\r\n                        x : e.clientX,\r\n                        y : e.clientY\r\n                    };\r\n\r\n                    manager.prepare(self,e);\r\n\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    ///if (self.dragSource) {\r\n                    ///    //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    ///    self.dragSource = null;\r\n                    ///    self.dragHandle = null;\r\n                    ///}\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    if (manager.dragging !== self) {\r\n                        return;\r\n                    }\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    if (manager.dragging !== self) {\r\n                        return;\r\n                    }\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    plugins.register(Draggable,\"draggable\");\r\n\r\n    return dnd.Draggable = Draggable;\r\n});"]}